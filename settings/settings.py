"""
Django settings for annuaire project.

Generated by 'django-admin startproject' using Django 5.2.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""
from pathlib import Path
# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
import os
import dj_database_url  # Pour un syntaxe différent de base de données
from dotenv import load_dotenv  # Pour les variables d'.env

# from allauth.account.signals import user_signed_up
# from django.contrib.auth.models import Group

# @receiver(user_signed_up)
# def user_signed_up_callback(sender, request, user, **kargs):
#     dashboard_user_group = Group.objects.get(name="dashboard")
#     user.groups.add(dashboard_user_group)


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Prendre les variables d'environnement
load_dotenv()

REQUIRED = ["SECRET_KEY"]

needs_required = []
for i in REQUIRED:
    if not os.getenv(i) != "":
        needs_required.append(i)

if needs_required != []:
    raise ValueError("Merci de mettre les variables suivantes dans .env: %s" % ", ".join(needs_required))

DEBUG = True if os.getenv("DEBUG") == "True" else False
DEBUG_TOOLBAR = True if os.getenv("DEBUG_TOOLBAR") == "True" else False

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv("SECRET_KEY",'django-insecure-&3flnc9oy4(gv_!7(=86h0b6!3dm+0_m@+1&3t5_fl_5@i%jok')

ALLOWED_HOSTS = os.getenv("ALLOWED_HOSTS", "127.0.0.1, localhost").replace(" ", "").split(",")
CSRF_TRUSTED_ORIGINS =os.getenv("CSRF_TRUSTED_ORIGINS", "https://127.0.0.1, https://localhost").replace(" ", "").split(",")
for host in ALLOWED_HOSTS:
    CSRF_TRUSTED_ORIGINS.append("https://" + host)

HOST_URL = os.getenv("HOST_URL", "localhost")
WAGTAILADMIN_BASE_URL = HOST_URL

# SITE_ID requis pour ALLAUTH
SITE_ID = os.getenv("SITE_ID", 1)

AUTHENTICATION_BACKENDS = (
    # Needed to login by username in Django admin, regardless of `allauth`
    "django.contrib.auth.backends.ModelBackend",
    # `allauth` specific authentication methods, such as login by e-mail
    "allauth.account.auth_backends.AuthenticationBackend",
)

SOCIALACCOUNT_PROVIDERS = {
    "openid_connect": {
        "OAUTH_PKCE_ENABLED": True,
        # 'SOCIALACCOUNT_ONLY': True,
        "APPS": [
            {
                "provider_id": "key-lesgrandsvoisins-com",
                "name": "key.lesgrandsvoisins.com",
                "client_id": os.getenv("KEYCLOAK_CONFIG_CLIENT_ID"),
                "secret": os.getenv("KEYCLOAK_CONFIG_CLIENT_SECRET_KEY"),
                "settings": {
                    "server_url": "%s/realms/%s" % (os.getenv("KEYCLOAK_CONFIG_SERVER_URL"),os.getenv("KEYCLOAK_CONFIG_REALM")),
                    # Optional token endpoint authentication method.
                    # May be one of "client_secret_basic", "client_secret_post"
                    # If omitted, a method from the the server's
                    # token auth methods list is used
                    "token_auth_method": "client_secret_post",
                },
            },
        ],
    }
}


# LOGIN_URL = '/login/'
# LOGIN_REDIRECT_URL = '/'
# ACCOUNT_AUTHENTICATION_METHOD = "username"
ACCOUNT_LOGIN_METHODS = {'username'}
SOCIALACCOUNT_AUTO_SIGNUP = True
ACCOUNT_EMAIL_VERIFICATION = "none"
SOCIALACCOUNT_ONLY = True
ACCOUNT_DEFAULT_HTTP_PROTOCOL = "https"
# # ACCOUNT_LOGIN_ON_EMAIL_CONFIRMATION = True
# ACCOUNT_LOGOUT_ON_GET = True
# # ACCOUNT_LOGOUT_REDIRECT_URL = '/login/'
# ACCOUNT_PRESERVE_USERNAME_CASING = False
# ACCOUNT_SESSION_REMEMBER = True
# # ACCOUNT_SIGNUP_PASSWORD_ENTER_TWICE = False
# ACCOUNT_USERNAME_BLACKLIST = ["admin", "god"]
# # ACCOUNT_USERNAME_MIN_LENGTH = 2

# Application definition

INSTALLED_APPS = [
    "allauth",
    "allauth.account",
    "allauth.socialaccount",
    "allauth.socialaccount.providers.openid_connect",
    "wagtail.contrib.forms",
    "wagtail.contrib.redirects",
    "wagtail.contrib.settings",
    "wagtail.embeds",
    "wagtail.sites",
    "wagtail.users",
    "wagtail.snippets",
    "wagtail.documents",
    "wagtail.images",
    "wagtail.search",
    "wagtail.admin",
    'wagtail.locales',  # Optional Wagtial locale management UI
    "wagtail.contrib.simple_translation",
    "modelcluster",
    "wagtail",
    "taggit",
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.humanize',
    'wagtail_modeladmin',          # if Wagtail >=5.1; Don't repeat if it's there already
    # 'wagtailmenus',
    'keycloak',
    'lesgrandsvoisins.annuaire',
    'lesgrandsvoisins.admin',
    'lesgrandsvoisins.home',
    'lesgrandsvoisins.tailwind',
    # 'meta', # django-meta for SEO
]

KEYCLOAK_CONFIG = {
    "SERVER_URL": os.getenv("KEYCLOAK_CONFIG_SERVER_URL"),
    "REALM": os.getenv("KEYCLOAK_CONFIG_REALM"),
    "CLIENT_ID": os.getenv("KEYCLOAK_CONFIG_CLIENT_ID"),
    "CLIENT_SECRET_KEY": os.getenv("KEYCLOAK_CONFIG_CLIENT_SECRET_KEY"),
    "ADMIN_USERNAME": os.getenv("KEYCLOAK_CONFIG_ADMIN_USERNAME"),
    "ADMIN_PASSWORD": os.getenv("KEYCLOAK_CONFIG_ADMIN_PASSWORD"),
    "USE_DUMMY": True if os.getenv("KEYCLOAK_CONFIG_USE_DUMMY") == "True" else False,
}

LDAP_CONFIG = {
    "URL": os.getenv("LDAP_URL"),
    "BASE_DN": os.getenv("LDAP_BASE_DN"),
    "BIND_DN": os.getenv("LDAP_BIND_DN"),
    "BIND_PASSWORD": os.getenv("LDAP_BIND_PASSWORD"),
    "USERS_OU": os.getenv("LDAP_USERS_OU"),  # corresponds to ou=users,dc=example,dc=org
    "GROUPS_OU": os.getenv("LDAP_GROUPS_OU"),  # corresponds to ou=users,dc=example,dc=org
}


MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    ]

if DEBUG_TOOLBAR:
    INSTALLED_APPS += [
        'debug_toolbar',
    ]
    MIDDLEWARE += [
        "debug_toolbar.middleware.DebugToolbarMiddleware",
    ]

MIDDLEWARE += [
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    "wagtail.contrib.redirects.middleware.RedirectMiddleware",
    'django.middleware.locale.LocaleMiddleware', # For automatic language prefix
    "allauth.account.middleware.AccountMiddleware",
]

# For DEBUG ou DEBUG_TOOLBAR
INTERNAL_IPS = ["127.0.0.1", "localhost", "0.0.0.0"]

ROOT_URLCONF = 'settings.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            os.path.join(BASE_DIR, "templates"),
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                "django.template.context_processors.debug",
                'django.template.context_processors.request',
                # "allauth.account.context_processors.account", # 
                # "allauth.socialaccount.context_processors.socialaccount", #
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'django.template.context_processors.i18n',
                'wagtail.contrib.settings.context_processors.settings',
                # 'wagtailmenus.context_processors.wagtailmenus',
            ],
        },
    },
]

# SILENCED_SYSTEM_CHECKS = ["wagtailadmin.W002"] # https://github.com/jazzband/wagtailmenus/issues/464





WSGI_APPLICATION = 'settings.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': BASE_DIR / 'db.sqlite3',
#     }
# }
DATABASE_URL = os.getenv("DATABASE_URL", ("sqlite:///%s/db.sqlite3") % BASE_DIR)  # Lire depuis .env

if DATABASE_URL:
    DATABASES = {
        "default": dj_database_url.parse(
            DATABASE_URL,
            conn_max_age=600,
            conn_health_checks=True,
        )
    }
else:
    raise ValueError("Please set the DATABASE_URL environment variable")



# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'fr-fr'

TIME_ZONE = 'Europe/Paris'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

# STATIC_URL = 'static/'

# STATICFILES_FINDERS = [
#     # "django.contrib.staticfiles.finders.FileSystemFinder",
#     # "django.contrib.staticfiles.finders.AppDirectoriesFinder",
#     # 'sass_processor.finders.CssFinder',
# ]

STATIC_ROOT = os.path.join(BASE_DIR, "static")
STATIC_URL = "/static/"

MEDIA_ROOT = os.path.join(BASE_DIR, "media")
MEDIA_URL = "/media/"

# STATICFILES_DIRS = [
#     os.path.join(BASE_DIR, "static"),
#     # os.path.join(BASE_DIR, "staticfiles"),
# ]

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'




# Wagtail settings

WAGTAIL_SITE_NAME = os.getenv("WAGTAIL_SITE_NAME","GrandV.org")

# Search
# https://docs.wagtail.org/en/stable/topics/search/backends.html
WAGTAILSEARCH_BACKENDS = {
    "default": {
        "BACKEND": "wagtail.search.backends.database",
    }
}


# Allowed file extensions for documents in the document library.
# This can be omitted to allow all files, but note that this may present a security risk
# if untrusted users are allowed to upload files -
# see https://docs.wagtail.org/en/stable/advanced_topics/deploying.html#user-uploaded-files
WAGTAILDOCS_EXTENSIONS = ['csv', 'docx', 'key', 'odt', 'pdf', 'pptx', 'rtf', 'txt', 'xlsx', 'zip']


# Logging
LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "handlers": {
        "console": {
            "class": "logging.StreamHandler",
        },
        "log_file": {
            "level": "INFO",
            "class": "logging.FileHandler",
            "filename": "debug.log",
        },
    },
    "root": {
        "handlers": ["console"],
        "level": "DEBUG",
    },
    "loggers": {
        "openai_logger": {
            "handlers": ["log_file"],
            "level": "INFO",
            "propagate": False,
        },
        "openid_logger": {
            "handlers": ["log_file"],
            "level": "INFO",
            "propagate": False,
        },
    },
}


# # Base URL to use when referring to full URLs within the Wagtail admin backend -
# # e.g. in notification emails. Don't include '/admin' or a trailing slash
# # Base URL to use when referring to full URLs within the Wagtail admin backend -
# # e.g. in notification emails. Don't include '/admin' or a trailing slash
# WAGTAILADMIN_BASE_URL = f"{os.getenv('HOST_PROTO', 'https')}://{HOST_URL}"


# HOST_PORT = os.getenv("HOST_PORT", "")
# if HOST_PORT != "":
#     WAGTAILADMIN_BASE_URL = f"{WAGTAILADMIN_BASE_URL}:{HOST_PORT}"
